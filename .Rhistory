summary(fit2)
# Incorrect analysis - no offset
fit2b <- glm(y~phiv, data=datacovid,
family=poisson(link=log))
summary(fit2b)
summary(fit2b)
library(tidyverse)
treat <- c("treat","placebo")
n <- c(15000,10000)
t <- c(5000,4000)
y <- c(100,30)
datatb <- tibble(treat=treat,n=n,t=t,y=y)
# Initialize the initial values
beta1 <- rep(0, p)
# Initialize the initial values
beta1 <- rep(0, 10)
mu1 <- exp(X %*% beta1)
# Initialize the initial values
beta1 <- rep(0, 10)
mu1 <- exp(n %*% beta1)
# Example dataset
n <- c(15000, 10000)
y <- c(100, 30)
t <- c(5000, 4000)
# Combine the columns into a data frame
datatb <- data.frame(n = n, y = y, t = t)
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
}
# Example dataset
n <- c(15000, 10000)
y <- c(100, 30)
t <- c(5000, 4000)
# Combine the columns into a data frame
datatb <- data.frame(n = n, y = y, t = t)
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
# Adjust the dimensions of W1
W1 <- W1[1:nrow(X), ]
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
}
# Example dataset
n <- c(15000, 10000)
y <- c(100, 30)
t <- c(5000, 4000)
# Combine the columns into a data frame
datatb <- data.frame(n = n, y = y, t = t)
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
# Adjust the dimensions of W1
W1 <- diag(diag(W1)[1:nrow(X)])
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
}
# Example dataset
n <- c(15000, 10000)
y <- c(100, 30)
t <- c(5000, 4000)
# Combine the columns into a data frame
datatb <- data.frame(n = n, y = y, t = t)
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
# Adjust the dimensions of W1
n_rows <- min(nrow(X), nrow(W1))
W1 <- W1[1:n_rows, 1:n_rows]
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
}
# Example dataset
n <- c(15000, 10000)
y <- c(100, 30)
t <- c(5000, 4000)
# Combine the columns into a data frame
datatb <- data.frame(n = n, y = y, t = t)
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
# Adjust the dimensions of W1
n_rows <- min(nrow(X), nrow(W1))
n_cols <- min(ncol(X), ncol(W1))
W1 <- W1[1:n_rows, 1:n_cols]
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
}
# Example dataset
treat <- c("treat","placebo")
n <- c(15000, 10000)
y <- c(100, 30)
t <- c(5000, 4000)
# Combine the columns into a data frame
datatb <- data.frame(treat=treat,n=n, y=y, t=t)
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
# Adjust the dimensions of W1
n_rows <- min(nrow(X), nrow(W1))
n_cols <- min(ncol(X), ncol(W1))
W1 <- W1[1:n_rows, 1:n_cols]
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
# Print the intermediate results
cat("Iteration:", iter, "\n")
cat("beta2:\n")
print(beta2)
cat("\n")
}
n_rows
W1[1:n_rows, 1:n_cols]
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
# Adjust the dimensions of W1
n_rows <- min(nrow(X), nrow(W1))
n_cols <- min(ncol(X), ncol(W1))
Witer <- Witer[1:n_rows, 1:n_cols]
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
# Print the intermediate results
cat("Iteration:", iter, "\n")
cat("beta2:\n")
print(beta2)
cat("\n")
}
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
# Adjust the dimensions of W1
n_rows <- min(nrow(X), nrow(W1))
n_cols <- min(ncol(X), ncol(W1))
W[iter] <- W[iter][1:n_rows, 1:n_cols]
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
# Print the intermediate results
cat("Iteration:", iter, "\n")
cat("beta2:\n")
print(beta2)
cat("\n")
}
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
# Adjust the dimensions of W1
n_rows <- min(nrow(X), nrow(W1))
n_cols <- min(ncol(X), ncol(W1))
W1[iter] <- W1[iter][1:n_rows, 1:n_cols]
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
# Print the intermediate results
cat("Iteration:", iter, "\n")
cat("beta2:\n")
print(beta2)
cat("\n")
}
# Create the design matrix X
X <- cbind(1, log(datatb$t))
# Initialize the initial values
beta1 <- rep(0, ncol(X))
mu1 <- exp(X %*% beta1)
for (iter in 1:10) {
Xtyminusm1 <- t(X) %*% (y - mu1)
W1 <- diag(exp(X %*% beta1))
# Adjust the dimensions of W1
n_rows <- min(nrow(X), nrow(W1))
n_cols <- min(ncol(X), ncol(W1))
W1 <- W1[1:n_rows, 1:n_cols]
XtW1Xinv <- solve(t(X) %*% W1 %*% X)
beta2 <- beta1 + XtW1Xinv %*% Xtyminusm1
mu2 <- exp(X %*% beta2)
# Update the variables for the next iteration
beta1 <- beta2
mu1 <- mu2
# Print the intermediate results
cat("Iteration:", iter, "\n")
cat("beta2:\n")
print(beta2)
cat("\n")
}
library(tidyverse)
treat <- c("treat","placebo")
n <- c(15000,10000)
t <- c(5000,4000)
y <- c(100,30)
datatb <- tibble(treat=treat,n=n,t=t,y=y)
# Initialize parameters
beta0 <- c(0, 0)
epsilon <- 1e-6  # Convergence threshold
max_iterations <- 100  # Maximum number of iterations
# Perform iterative estimation
for (iteration in 1:max_iterations) {
mu0 <- exp(X %*% beta0)
Xtyminusm0 <- t(X) %*% (y - mu0)
W0 <- diag(mu0)
XtWoXinv <- solve(t(X) %*% W0 %*% X)
beta1 <- beta0 + XtWoXinv %*% Xtyminusm0
# Check convergence
if (max(abs(beta1 - beta0)) < epsilon) {
break  # Convergence reached, exit the loop
}
beta0 <- beta1  # Update parameter estimates for the next iteration
}
# Initialize parameters
beta0 <- c(0, 0)
epsilon <- 1e-6  # Convergence threshold
max_iterations <- 100  # Maximum number of iterations
# Perform iterative estimation
for (iteration in 1:max_iterations) {
mu0 <- exp(X %*% beta0)
Xtyminusm0 <- t(X) %*% (y - mu0)
W0 <- diag(mu0)
XtWoXinv <- solve(t(X) %*% (W0 %*% X))
beta1 <- beta0 + XtWoXinv %*% Xtyminusm0
# Check convergence
if (max(abs(beta1 - beta0)) < epsilon) {
break  # Convergence reached, exit the loop
}
beta0 <- beta1  # Update parameter estimates for the next iteration
}
# Initialize parameters
beta0 <- c(0, 0)
epsilon <- 1e-6  # Convergence threshold
max_iterations <- 100  # Maximum number of iterations
# Perform iterative estimation
for (iteration in 1:max_iterations) {
mu0 <- exp(X %*% beta0)
Xtyminusm0 <- t(X) %*% (y - mu0)
W0 <- diag(mu0)
XtWoXinv <- solve(t(X) %*% (W0 %*% X))
beta1 <- beta0 + XtWoXinv %*% Xtyminusm0
# Check convergence
if (max(abs(beta1 - beta0)) < epsilon) {
break  # Convergence reached, exit the loop
}
beta0 <- beta1  # Update parameter estimates for the next iteration
}
# Initialize parameters
beta0 <- c(0, 0)
criterion <- 0.001  # error criterion
# Perform iteration
for (iteration in 1:10) {
mu0 <- exp(X %*% beta0)
Xtyminusm0 <- t(X) %*% (y - mu0)
W0 <- diag(mu0)
XtWoXinv <- solve(t(X) %*% (W0 %*% X))
beta1 <- beta0 + XtWoXinv %*% Xtyminusm0
# Check convergence
if (max(abs(beta1 - beta0)) < epsilon) {
break  # Convergence reached, exit the loop
}
beta0 <- beta1  # Update parameter estimates for the next iteration
}
# Initialize parameters
beta0 <- c(0, 0)
criterion <- 0.001  # error criterion
# Perform iteration
for (iteration in 1:10) {
mu0 <- exp(X %*% beta0)
Xtyminusm0 <- t(X) %*% (y - mu0)
W0 <- diag(mu0)
XtWoXinv <- solve(t(X) %*% (W0 %*% X))
beta1 <- beta0 + XtWoXinv %*% Xtyminusm0
# Check convergence
if (max(abs(beta1 - beta0)) < epsilon) {
break  # Convergence reached, exit the loop
}
beta0 <- beta1  # Update parameter estimates for the next iteration
}
# Initialize parameters
beta0 <- c(0, 0)
criterion <- 0.001  # error criterion
# Perform iteration
for (iteration in 1:10) {
mu0 <- exp(X %*% beta0)
Xtyminusm0 <- t(X) %*% (y - mu0)
W0 <- diag(mu0)
XtWoXinv <- solve(t(X) %*% (W0 %*% X))
beta1 <- beta0 + XtWoXinv %*% Xtyminusm0
# Check convergence
if (max(abs(beta1 - beta0)) < epsilon) {
break  # Convergence reached, exit the loop
}
beta0 <- beta1  # Update parameter estimates for the next iteration
}
30.5(2.7)^2 - 75.5(2.7) + 52
2+2
30.5(2.7)^2
30.5(2.7)**2 + 75.5(2.7) + 52
30.5*2.7**2 + 75.5*2.7 + 52
30.5*(2.7**2) + 75.5*2.7 + 52
y <- c(2,3,6,7,8,9,10,12,15)
x <- c(-1,-1,0,0,0,0,1,1,1)
# Incorrect analysis: fitting a simple linear regression
fit <- lm(y~x)
summary(fit)
x <- c(43,21,25,42,57,59)
y <- c(99,65,79,75,87,81)
model <- lm(y~x)
summary(model)
x <- c(1,2,3,4,5)
y <- c(2,5,11,8,14)
model <- lm(y~x)
summary(model)
x <- c(40,25,98,18)
y <- c(25,58,18,79)
model <- lm(y~x)
summary(model)
x <- c(1,2,4,5)
y <- c(10,15,22,30)
m<- lm(y~x)
summary(m)
x <- c(3,9,5,3)
y <- c(8,6,4,2)
m<- lm(y~x)
summary(m)
x <- c(25,45,10,20)
y <- c(50,67,23,49)
m<- lm(y~x)
summary(m)
x <- (20,25,33,40)
x <- c(20,25,33,40)
y <- c(120,116,98,60)
m <- lm(y~x)
summary(m)
shiny::runApp('Documents/Qhala/Data_Science.class/MCF/Skilling partners map')
library(shiny)
library(tidyverse)
library(plotly)
library(shinydashboard)
library(readxl)
library(sf)
runApp('Documents/Qhala/Data_Science.class/MCF/Skilling partners map')
library(shiny)
library(tidyverse)
library(plotly)
library(shinydashboard)
library(readxl)
library(sf)
library(sf)
library(shiny)
library(tidyverse)
library(plotly)
library(shinydashboard)
library(readxl)
library(sf)
runApp('Documents/Qhala/Data_Science.class/MCF/Skilling partners map')
install.packages("stream")
runApp('Documents/Qhala/Data_Science.class/MCF/Skilling partners map')
runApp('Documents/Qhala/Data_Science.class/MCF/Skilling partners map')
runApp('Documents/Qhala/Data_Science.class/MCF/Skilling partners map')
runApp('Documents/Qhala/Data_Science.class/MCF/Skilling partners map')
shiny::runApp('Documents/Qhala/Data_Science.class/kiji-dashboard/app')
setwd("~/Documents/Qhala/Data_Science.class/CEMA/cema_2022_report/KDHS_2022-full-report")
Agricultural_land_ownsership <- fread('data/table_15/table_15.5.1_&_table_15.5.3_Agicultural_Land_ownership.csv')
library(data.table)
Agricultural_land_ownsership <- fread('data/table_15/table_15.5.1_&_table_15.5.3_Agicultural_Land_ownership.csv')
View(Agricultural_land_ownsership)
names(Agricultural_land_ownsership)
Agricultural_land_ownsership$`Background characteristics`
unique(Agricultural_land_ownsership$`Background characteristics`)
existing_itn_use_county <- fread("data/DHS County tables/table12_5C_grp_existing_ITN_use_by_county.csv")
existing_itn_use_county1 <- full_join(county, existing_itn_use_county, by=c("Name"="County"))|>
#mutate(proportion_category=fifelse(Proportion<30,"<30%", fifelse(Proportion>30 & Proportion<61,"30%-60%",">60%")))|>
mutate(names1=paste0(Name,": ",Proportion,"%"))|>
mutate(epi_zone=fifelse(Name%in%c("Kisii","Nyamira","West Pokot","Trans Nzoia","Uasin Gishu","Nandi","Narok","Kericho","Bomet","Elgeyo Marakwet","Turkana","Kajiado"),"Highland Epidemic Prone", fifelse(Name%in%c("Siaya","Kisumu","Migori","Homa Bay","Kakamega","Vihiga","Bungoma","Busia","Bungoma","Kakamega"),"Lake Stable Endemic", fifelse(Name%in%c("Mombasa","Kwale","Kilifi","Lamu","Taita Taveta","Tana River"),"Coast Stable Endemic", fifelse(Name%in%c("Marsabit","Isiolo","Meru","Tharaka Nithi","Embu","Kitui","Garissa","Wajir","Mandera","Samburu","Baringo","Elgeyo Marakwet","West Pokot","Makueni"),"Seasonal Low Transmission", "Low Risk")))))
library(tidyverse)
existing_itn_use_county1 <- full_join(county, existing_itn_use_county, by=c("Name"="County"))|>
#mutate(proportion_category=fifelse(Proportion<30,"<30%", fifelse(Proportion>30 & Proportion<61,"30%-60%",">60%")))|>
mutate(names1=paste0(Name,": ",Proportion,"%"))|>
mutate(epi_zone=fifelse(Name%in%c("Kisii","Nyamira","West Pokot","Trans Nzoia","Uasin Gishu","Nandi","Narok","Kericho","Bomet","Elgeyo Marakwet","Turkana","Kajiado"),"Highland Epidemic Prone", fifelse(Name%in%c("Siaya","Kisumu","Migori","Homa Bay","Kakamega","Vihiga","Bungoma","Busia","Bungoma","Kakamega"),"Lake Stable Endemic", fifelse(Name%in%c("Mombasa","Kwale","Kilifi","Lamu","Taita Taveta","Tana River"),"Coast Stable Endemic", fifelse(Name%in%c("Marsabit","Isiolo","Meru","Tharaka Nithi","Embu","Kitui","Garissa","Wajir","Mandera","Samburu","Baringo","Elgeyo Marakwet","West Pokot","Makueni"),"Seasonal Low Transmission", "Low Risk")))))
county <- st_read("shapefiles/County.shp")
library(sf)
county <- st_read("shapefiles/County.shp")
county <- ms_simplify(county, keep = 0.001)
library(rmapshaper)
county <- ms_simplify(county, keep = 0.001)
existing_itn_use_county1 <- full_join(county, existing_itn_use_county, by=c("Name"="County"))|>
#mutate(proportion_category=fifelse(Proportion<30,"<30%", fifelse(Proportion>30 & Proportion<61,"30%-60%",">60%")))|>
mutate(names1=paste0(Name,": ",Proportion,"%"))|>
mutate(epi_zone=fifelse(Name%in%c("Kisii","Nyamira","West Pokot","Trans Nzoia","Uasin Gishu","Nandi","Narok","Kericho","Bomet","Elgeyo Marakwet","Turkana","Kajiado"),"Highland Epidemic Prone", fifelse(Name%in%c("Siaya","Kisumu","Migori","Homa Bay","Kakamega","Vihiga","Bungoma","Busia","Bungoma","Kakamega"),"Lake Stable Endemic", fifelse(Name%in%c("Mombasa","Kwale","Kilifi","Lamu","Taita Taveta","Tana River"),"Coast Stable Endemic", fifelse(Name%in%c("Marsabit","Isiolo","Meru","Tharaka Nithi","Embu","Kitui","Garissa","Wajir","Mandera","Samburu","Baringo","Elgeyo Marakwet","West Pokot","Makueni"),"Seasonal Low Transmission", "Low Risk")))))
existing_itn_use_county1
View(existing_itn_use_county10
View(existing_itn_use_county1)
View(county)
existing_itn_use_county1 <- full_join(county, existing_itn_use_county, by=c("Name"="County"))
existing_itn_use_county <- fread("data/DHS County tables/table12_5C_grp_existing_ITN_use_by_county.csv")
existing_itn_use_county <- existing_itn_use_county[, names1 := paste0(Name, ": ", Proportion, "%")]
existing_itn_use_county <- existing_itn_use_county[, Name := paste0(Name, ": ", Proportion, "%")]
existing_itn_use_county <- dt[, names1 := paste0(Name, ": ", Proportion, "%")]
existing_itn_use_county <- fread("data/DHS County tables/table12_5C_grp_existing_ITN_use_by_county.csv")
existing_itn_use_county <- dt[, names1 := paste0(Name, ": ", Proportion, "%")]
existing_itn_use_county <- fread("data/DHS County tables/table12_5C_grp_existing_ITN_use_by_county.csv")
existing_itn_use_county <- existing_itn_use_county[, names1 := paste0(Name, ": ", Proportion, "%")]
View(existing_itn_use_county)
existing_itn_use_county <- fread("data/DHS County tables/table12_5C_grp_existing_ITN_use_by_county.csv")
View(existing_itn_use_county)
existing_itn_use_county <- fread("data/DHS County tables/table12_5C_grp_existing_ITN_use_by_county.csv")
existing_itn_use_county <- existing_itn_use_county[, names1 := paste0(Name, ": ", Proportion, "%")]
existing_itn_use_county <- existing_itn_use_county[, names1 := paste0(Names, ": ", Proportion, "%")]
existing_itn_use_county <- existing_itn_use_county[, epi_zone := fifelse(
Name %in% c("Kisii", "Nyamira", "West Pokot", "Trans Nzoia", "Uasin Gishu", "Nandi", "Narok", "Kericho", "Bomet", "Elgeyo Marakwet", "Turkana", "Kajiado"),
"Highland Epidemic Prone",
fifelse(Name %in% c("Siaya", "Kisumu", "Migori", "Homa Bay", "Kakamega", "Vihiga", "Bungoma", "Busia", "Bungoma", "Kakamega"),"Lake Stable Endemic",
fifelse(Name %in% c("Mombasa", "Kwale", "Kilifi", "Lamu", "Taita Taveta","Tana River"),"Coast Stable Endemic",
fifelse(Name %in% c("Marsabit", "Isiolo", "Meru", "Tharaka Nithi", "Embu", "Kitui", "Garissa", "Wajir", "Mandera", "Samburu", "Baringo", "Elgeyo Marakwet", "West Pokot", "Makueni"),"Seasonal Low Transmission","Low Risk"))))]
View(existing_itn_use_county)
children_itn_use_county <- fread("data/DHS County tables/table12_6C_grp_children_ITN_use_by_county.csv")
View(children_itn_use_county)
reason_itn_not_used_county <- fread("data/table_12/table12_8C_grp_reason_itn_not_used_by_county_2.csv")
View(reason_itn_not_used_county)
iptp_county <- fread("data/DHS County tables/table12_9C_grp_iptp_by_county.csv")
View(iptp_county)
mal_fever_county <- fread("data/DHS County tables/table12_10C_grp_malaria_fever_by_county.csv")
View(mal_fever_county)
rsconnect: : setAccountInfo(name= 'nderitogatere', token- 'D98979922DFECCBE5F4416 210C1F09', secret= '1WDdC7gA12IZLcFLppkol. jOK80KQzqhDM9k82NUY")
rsconnect:: setAccountInfo(name= 'nderitogatere', token- 'D98979922DFECCBE5F4416 210C1F09', secret= '1WDdC7gA12IZLcFLppkol. jOK80KQzqhDM9k82NUY")
rsconnect:: setAccountInfo(name= 'nderitogatere', token- 'D98979922DFECCBE5F4416 210C1F09', secret= '1WDdC7gA12IZLcFLppkoljOK80KQzqhDM9k82NUY")
rsconnect:: setAccountInfo(name= 'nderitogatere', token= 'D98979922DFECCBE5F4416 210C1F09', secret= '1WDdC7gA12IZLcFLppkoljOK80KQzqhDM9k82NUY")
rsconnect::setAccountInfo(name= 'nderitogatere', token= 'D98979922DFECCBE5F4416 210C1F09', secret= '1WDdC7gA12IZLcFLppkoljOK80KQzqhDM9k82NUY")
)
))
asjdkfa
rsconnect::setAccountInfo(name= 'nderitogatere', token= 'D98979922DFECCBE5F4416 210C1F09', secret= '1WDdC7gA12IZLcFLppkoljOK80KQzqhDM9k82NUY')
rsconnect::setAccountInfo(name='nderitogatere', token='D9897E9E922DFECCBE5F4416210C1F09', secret='1WDdC7gA12IZLcFLppkoljOK8OKQzqhDM9k82NUY')
rsconnect::deployApp(index.Rmd)
rsconnect::deployApp("index.Rmd")
